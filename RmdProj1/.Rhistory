#Check data
if (!all(levels(data[, "pred"]) == levels(data[, "obs"])))
stop("levels of observed and predicted data do not match")
#Calculate custom one-vs-all stats for each class
prob_stats <- lapply(levels(data[, "pred"]), function(class)
{
#Grab one-vs-all data for the class
pred <- ifelse(data[, "pred"] == class, 1, 0)
obs <- ifelse(data[, "obs"] == class, 1, 0)
prob <- data[,class]
#Calculate one-vs-all AUC and logLoss and return
cap_prob <- pmin(pmax(prob, .000001), .999999)
prob_stats <- c(auc(obs, prob), logLoss(obs, cap_prob))
names(prob_stats) <- c("ROC", "logLoss")
return(prob_stats)
})
prob_stats <- do.call(rbind, prob_stats)
rownames(prob_stats) <- paste( "Class:" , levels(data[, "pred"]))
#Calculate confusion matrix-based statistics
CM <- confusionMatrix(data[, "pred"], data[, "obs"])
#Aggregate and average class-wise stats
#Todo: add weights
class_stats <- cbind(CM$byClass, prob_stats)
class_stats <- colMeans(class_stats)
#Aggregate overall stats
overall_stats <- c(CM$overall)
#Combine overall with class-wise stats and remove some stats we don't want
stats <- c(overall_stats, class_stats)
stats <- stats[! names(stats) %in% c("AccuracyNull","Prevalence", "Detection Prevalence")]
#Clean names and return
names(stats) <- gsub('[[:blank:]] +', '_' , names(stats))
return(stats)
})
42534/10.05
1960/10.09
2104-7
2097/72.6
2097/72.7
46339-7
46332/71
46332/71.1
46332/71.2
43323/73
46323/73
46323/72.8
46323/72.88
46323/72.95
46323/72.9
46323/72.88
46333/72.88
46333/72.8
46333/72.88
46333/73
46333/72.95
2141-7
2134/74
2134/73.8
2134/73.7
2134/73.6
2134/73.5
2532-7
2525/1.3
2525/1.31
2525/1.3
2525/1.31
u = "guest"
p = "niehs"
mychannel <-  dbConnect(MySQL(), user= u, password= p, dbname='RATEmiRs', host='wine.niehs.nih.gov')
library(RMySQL)
mychannel <-  dbConnect(MySQL(), user= u, password= p, dbname='RATEmiRs', host='wine.niehs.nih.gov')
#mychannel <-  dbConnect(MySQL(), user= u, password= p, dbname='RATEmiRs', host='bioinfo5.niehs.nih.gov')
# Function to make it easier to query
query <- function(...) dbGetQuery(mychannel, ...)
script <- paste ("select tissue_name from tissue_collection where organ_id =
(select auto_organ from  organ_collection where organ_name =", organSelected, ")",  sep = "\"" )
organSelected = "Brain"
script <- paste ("select tissue_name from tissue_collection where organ_id =
(select auto_organ from  organ_collection where organ_name =", organSelected, ")",  sep = "\"" )
Tissue2test <- query(script)
Tissue2test
script <- paste ("select tissue_name from tissue_collection where organ_id !=
(select auto_organ from  organ_collection where organ_name =", organSelected, ")",  sep = "\"" )
Tissueofinterest <- query(script)
Tissueofinterest
Tissueofinterest$tissue_name
tmp <- query(script)
Tissue2test <- paste(tmp$tissue_name, sep=",", collapse="")
Tissue2test
Tissueofinterest$tissue_name
paste(c("T","i","o","s"), c("his ", "s ", "ne ",
"entence."),sep="",collapse="")
paste(c("T","i","o","s"), c("his ", "s ", "ne ",
"entence."),sep=",",collapse="")
tmp$tissue_name
paste(tmp$tissue_name, sep=",", collapse="")
paste(tmp$tissue_name, sep=",", collapse=",")
tmp <- query(script)
Tissue2test <- paste(tmp$tissue_name, sep="", collapse=",")
Tissue2test
tmp <- query(script)
Tissue2test <- paste(tmp$tissue_name, sep="", collapse=",")
script <- paste ("select tissue_name from tissue_collection where organ_id !=
(select auto_organ from  organ_collection where organ_name =", organSelected, ")",  sep = "\"" )
tmp <- query(script)
Tissueofinterest <- paste(tmp$tissue_name, sep="", collapse=",")
Tissue2test
script <- paste ("select tissue_name from tissue_collection where organ_id =
(select auto_organ from  organ_collection where organ_name =", organSelected, ")",  sep = "\"" )
tmp <- query(script)
Tissue2test <- paste(tmp$tissue_name, sep="", collapse=",")
script <- paste ("select tissue_name from tissue_collection where organ_id !=
(select auto_organ from  organ_collection where organ_name =", organSelected, ")",  sep = "\"" )
tmp <- query(script)
Tissueofinterest <- paste(tmp$tissue_name, sep="", collapse=",")
Tissue2test
Tissueofinterest
2141-7
2134/10.9
tissues2pull_array <- c (Tissue2test, strsplit(Tissueofinterest, ",")[[1]])
tissues2pull_array
tissues2pull_array <- c (strsplit(Tissue2test, ",")[[1]], strsplit(Tissueofinterest, ",")[[1]])
tissues2pull_array
source("x:/project2017/GeneticAssociationAnalysis/Rscripts/GWAS-tools.R")
dd<-createSampleGwasData()
dd$pvalue[3000] <- 1e-7 #include a significant result
manhattan.plot(dd$chr, dd$pos, dd$pvalue)
dd$chr
dd$pos
#generate sample data (with X) using above function
dd<-createSampleGwasData(include.X=T)
#now plot chromosomes in correct order
manhattan.plot(factor(dd$chr, levels=c(1:10, "X")), dd$pos, dd$pvalue)
dd$chr
#generate fake data
dd<-createSampleGwasData()
dd$snp <- paste("rs", 1:length(dd$pvalue), sep="") #make up SNP names
#create annotations
ann<-annotateSNPRegions(dd$snp, dd$chr,dd$pos,dd$pvalue,
c("rs10", "rs1001", "rs2005"),
labels=c("GENE1","GENE2","GENE3"),
col="blue",
kbaway=100
)
#draw plot
manhattan.plot(dd$chr, dd$pos, dd$pvalue, annotate=ann)
dd$chr
dd$pos
dd$pvalue
ann
ann
str(ann)
dd<-createSampleGwasData()
str(dd$chr)
str(dd$pos)
# VERSION 1.0
assign("installP", function(pckgs){
ins <- function(pckg, mc){
add <- paste(c(" ", rep("-", mc+1-nchar(pckg)), " "), collapse = "");
if( !require(pckg,character.only=TRUE) ){
reps <- c("http://lib.stat.cmu.edu/R/CRAN","http://cran.uk.R-project.org");
for (r in reps) try(utils::install.packages(pckg, repos=r), silent=TRUE);
if(!require(pckg,character.only = TRUE)){   cat("Package: ",pckg,add,"not found.\n",sep="");
}else{                                      cat("Package: ",pckg,add,"installed.\n",sep="");}
}else{                                          cat("Package: ",pckg,add,"is loaded.\n",sep=""); } }
invisible(suppressMessages(suppressWarnings(lapply(pckgs,ins, mc=max(nchar(pckgs)))))); cat("\n");
}, envir=as.environment("dg_base"))
installP(c("base","a","TFX"))
assign("installP", function(pckgs){
ins <- function(pckg, mc){
add <- paste(c(" ", rep("-", mc+1-nchar(pckg)), " "), collapse = "");
if( !require(pckg,character.only=TRUE) ){
reps <- c("http://lib.stat.cmu.edu/R/CRAN","http://cran.uk.R-project.org");
for (r in reps) try(utils::install.packages(pckg, repos=r), silent=TRUE);
if(!require(pckg,character.only = TRUE)){   cat("Package: ",pckg,add,"not found.\n",sep="");
}else{                                      cat("Package: ",pckg,add,"installed.\n",sep="");}
}else{                                          cat("Package: ",pckg,add,"is loaded.\n",sep=""); } }
invisible(suppressMessages(suppressWarnings(lapply(pckgs,ins, mc=max(nchar(pckgs)))))); cat("\n");
}, envir=as.environment("dg_base"))
## These codes are used for installing packages
# function for installing needed packages
installpkg <- function(x){
if(x %in% rownames(installed.packages())==FALSE) {
if(x %in% rownames(available.packages())==FALSE) {
paste(x,"is not a valid package - please check again...")
} else {
install.packages(x)
}
} else {
paste(x,"package already installed...")
}
}
required_packages  <- c("sqldf","car")
lapply(required_packages,installpkg)
(available.packages()
)
load("x:/project2017/GeneticAssociationAnalysis/mitoStudy/SNP-processed-for-mito-w-31-phenotypes.rda")
dim(snp.4.study.filtered)
library(SomaticSignatures)
data(signatures21, package = "SomaticSignatures")
colnames(signatures21)
head(signatures21)
source("X:/R-project/customPackages/Rutil.R")
source("X:/R-project/customPackages/Rutils.R")
myPlotSpectrum(signatures21[,c(1:5)])
SomaticSignatures:::plotSpectrum(signatures21[,c(1:5)])
shiny::runApp('X:/myGit/rShiny/census-app')
shiny::runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
20*6
20*6 + (203/285)*400
160/400
(160/400)*285
20*6 + (89/285)*400
240*.9
20*6 + (89/285)*400 + 216
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
-y
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
shiny::runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/How-to-start-2/code/07-eventReactive.R')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
shiny::runApp('X:/myGit/rShiny/MotionDetection')
shiny::runApp('X:/myGit/rShiny/learningNote/disableButtonEG')
runApp('X:/myGit/rShiny/learningNote/disableButtonEG')
source('X:/myGit/rShiny/learningNote/disableButtonEG/enableButton.R')
install.packages("shinyjs")
source('X:/myGit/rShiny/learningNote/disableButtonEG/enableButton.R')
source('X:/myGit/rShiny/learningNote/disableButtonEG/enableButton.R')
runApp('X:/myGit/rShiny/learningNote/disableButtonEG')
tmp = installed.packages()
installedpackages = as.vector(tmp[is.na(tmp[,"Priority"]), 1])
length(installedpackages)
head(installedpackages)
getwd()
save(installedpackages, file="~/Desktop/installed_packages.rda")
save(installedpackages, file="installed_packages.rda")
library(plotrix)
revaxis
?plot
shiny::runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
yrange <- (y1[1] - y1[3])*0.5
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
yrange <- (y1[1] - y1[3])*0.1
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
runApp('X:/myGit/rShiny/MotionDetection')
shiny::runApp('X:/myGit/rShiny/MotionDetection')
186818412/4
library(doMC)
library(multicore)
library(RMySQL)
library(VariantAnnotation)
fl <- system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation")
vcf <- readVcf(fl, "hg19")
head(vcf)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
seqlevels(vcf) <- "chr22"
rd <- rowRanges(vcf)
loc <- locateVariants(rd, txdb, CodingVariants())
rd
head(loc, 3)
locateVariants
showMethods("locateVariants")
source("https://bioconductor.org/biocLite.R")
biocLite("TxDb.Mmusculus.UCSC.mm10.knownGene")
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
ls()
txdb <- TxDb.Mmusculus.UCSC.mm10.knownGene
head(txdb)
str(txdb)
rd
rowRanges
showMethods("rowRanges")
head(loc, 3)
seqlevels(vcf)
head(vcf)
149+270+84+82+233+36
149+270+84+82+233+36+53+237+71+76+224+120
shiny::runApp('X:/myGit/STARTapp')
install.packages("ggivs")
install.packages("ggvis")
runApp('X:/myGit/STARTapp')
install.packages("shinyBS")
runApp('X:/myGit/STARTapp')
install.packages("heatmaply")
runApp('X:/myGit/STARTapp')
install.packages("readr")
runApp('X:/myGit/STARTapp')
install.packages("readr")
runApp('X:/myGit/STARTapp')
shiny::runApp('X:/myGit/STARTapp')
setwd("x:/project2017/GeneticAssociationAnalysis/RmarkdownProj1/")
source("helperScripts/GWAS-tools.R")
setwd("x:/project2017/GeneticAssociationAnalysis/RmarkdownProj1/")
source("helperScripts/GWAS-tools.R")
setwd("x:/project2017/GeneticAssociationAnalysis/RmarkdownProj1/")
source("helperScripts/GWAS-tools.R")
source("helperScripts/emma.R")
columns2retain <- c (
"X129X1.SvJ",
"X129S1SvlmJ",
"A.J",
"AKR.J",
"BALB.cByJ",
"BALB.cJ",
"BTBRT.tf.J",
"BUB.BnJ",
"C3H.HeJ",
"C57BL.10J",
"C57BL.6J",
"C57BR.cdJ",
"C57L.J",
"C58.J",
"CAST.EiJ",
"CBA.J",
"CE.J",
"DBA.2J",
"FVB.NJ",
"I.LnJ",
"KK.HIJ",
"MA.MyJ",
"MOLF.EiJ",
"MRL.MpJ",
"NOR.LtJ",
"NZO.HILtJ",
"NZW.LacJ",
"P.J",
"PL.J",
"PWD.PhJ",
"PWK.PhJ",
"RIIIS.J",
"SJL.J",
"SM.J",
"SWR.J",
"WSB.EiJ",
"NOD.LtJ"
)
dt <- read.csv("data/phenotyp-from-Jen.csv")
#dim(dt)
phenotypeFromJen <- dt
strain.mod <- gsub ("/", ".", dt$Strain)
##  Make sure the order of strain names are correct!!
#for (i in 1:36)
#{
#  cat (as.vector(dt$Strain)[i])
#  cat("\t")
#  cat (columns2retain[i])
#  cat("\n")
#}
##  it is checked ##FIXME
cat ("Here are the strains..\n")
columns2retain[c(1:36)]
##  Modify rownames for phenotyp data
phenotypeFromJen <- phenotypeFromJen[,-1]
cat ("Here are the phenotypes..\n")
colnames(phenotypeFromJen)
rownames(phenotypeFromJen) <- columns2retain[c(1:36)]
load("data/Genotype_file_36_strains_623054_SNPs.rda")
dim(genoData)
#[1] 623046     52
load("data/SNP-processed-for-36-phenotypes.rda")
dim(snp.4.study.filtered)
#[1]596664     52
load("data/genotypeInNumeric-for-36-phenotypes.rda")
dim(genotypeInNumeric)
#[1] 596664     36
colnames(genotypeInNumeric)
head(row.names(genotypeInNumeric))
load("/data/kinship-for-36-phenotypes-02012017.rda")
load("data/Genotype_file_36_strains_623054_SNPs.rda")
dim(genoData)
#[1] 623046     52
load("data/SNP-processed-for-36-phenotypes.rda")
dim(snp.4.study.filtered)
#[1]596664     52
load("data/genotypeInNumeric-for-36-phenotypes.rda")
dim(genotypeInNumeric)
#[1] 596664     36
colnames(genotypeInNumeric)
head(row.names(genotypeInNumeric))
load("data/kinship-for-36-phenotypes-02012017.rda")
K = kinship.out$kinship
strains = kinship.out$strain
strains
load ( "data/processed-SNP-4-model.rda")
dim(processData$xs.w.meta)
str(processData$xs)
#rownames(phenotypeFromJen) <- columns2retain[c(1:36)]
dim(xs.in.model)
phenotypeFromJen <- phenotypeFromJen[order(rownames(phenotypeFromJen)),]
rownames(phenotypeFromJen))
rownames(phenotypeFromJen)
dim(phenotypeFromJen)
rownames(phenotypeFromJen)
colnames(phenotypeFromJen)
xs <- as.data.frame(processData$xs)
rownames(xs)
processData$xs.w.meta[,1]
colnames(processData$xs.w.meta[-c(1:16)])
dim(xs)
rownames(xs) <- processData$xs.w.meta[,1]
colnames(xs) <- colnames(processData$xs.w.meta[-c(1:16)])
(colnames(xs))
order(colnames(xs))
xs <- xs[,order(colnames(xs))]
order(colnames(xs))
strains
colnames(xs)
strains = colnames(xs)
strains == colnames(xs)
strains = kinship.out$strain
strains == colnames(xs)
dim(phenotypeFromJen)
rownames(phenotypeFromJen)
colnames(phenotypeFromJen)
strains ==  colnames(phenotypeFromJen)
rownames(phenotypeFromJen)
strains ==  rownames(phenotypeFromJen)
as.matrix(phenotypeFromJen[,1])
Y.in.model <- as.matrix(phenotypeFromJen[,1]) # "Protein.P4"
rs <- emma.ML.LRT(Y.in.model, as.matrix (xs), K)
temp  <- as.vector(sapply(snp.4.study[,6],as.character))
chrs  <- gsub ("chr", "", temp)
pos  = snp.4.study[,8]
pval = rs$ps
pval.emma.ML.LRT <- rs$ps
setwd("X:/project2016/GoldenGateProject/RmdProj1")
library(HardyWeinberg)
library(XLConnect)
source("helperScripts/analysisFuncs.R")
getwd()
setwd("x:/project2016/GoldenGateProject/RmdProj1/")
library(rmarkdown)
library(knitr)
##  column7: breastfeeding status
render("x:/project2016/GoldenGateProject/RmdProj1/proj1_in_pdf.rmd",
params = list( brfStatus = 7,
sesStatus = 4,
genStatus = 2,
regStatus = 3),
output_file = "x:/project2016/GoldenGateProject/RmdProj1/analysisResults/RSV_GoldenGate.pdf")
